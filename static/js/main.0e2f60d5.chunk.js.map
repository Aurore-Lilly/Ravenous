{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","sortByOptions","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","alert","Object","keys","sortByOptionsValue","onClick","handleSortByChange","getSortByClass","renderSortByOptions","placeholder","onChange","onKeyDown","handleKeyPress","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","imageSrc","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e2f60d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    const { business } = this.props;\r\n    return (\r\n    <div className=\"Business\">\r\n  <div className=\"image-container\">\r\n    <img src='https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg' alt=''/>\r\n  </div>\r\n  <h2>{business.name}</h2>\r\n  <div className=\"Business-information\">\r\n    <div className=\"Business-address\">\r\n      <p>{business.address}</p>\r\n      <p>{business.city}</p>\r\n      <p>{business.state} {business.zipCode}</p>\r\n    </div>\r\n    <div className=\"Business-reviews\">\r\n      <h3>{business.category}</h3>\r\n      <h3 className=\"rating\">{business.rating} stars</h3>\r\n      <p>{business.reviewCount} reviews</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Business;\r\n","import React from 'react';\r\nimport'./BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BusinessList\">\r\n      {\r\n      this.props.businesses.map(business => {\r\n        return <Business business={business} key={business.id} />\r\n      })\r\n    }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BusinessList;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nconst sortByOptions = {\r\n   'Best Match': 'best_match',\r\n   'Highest Rated': 'rating',\r\n   'Most Reviewed': 'review_count'\r\n };\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      term: (''),\r\n      location: ('') ,\r\n      sortBy: 'best_match',\r\n    };\r\n    this.sortByOptions = {\r\n      'Best Match': 'best_match',\r\n      'Highest Rated': 'rating',\r\n      'Most Reviewed': 'review_count'\r\n    };\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n  getSortByClass(sortByOption){\r\n      if (this.state.sortBy === sortByOption){\r\n        return 'active';\r\n      }else{\r\n        return ('');\r\n      }\r\n  }\r\n  handleSortByChange(sortByOption) {\r\n    this.setState({\r\n      sortBy: sortByOption,\r\n    });\r\n  }\r\n  handleTermChange(event){\r\n    this.setState({\r\n      term: event.target.value,\r\n    });\r\n  }\r\n  handleLocationChange(event) {\r\n    this.setState({\r\n      location: event.target.value,\r\n    });\r\n  }\r\n  handleSearch(event) {\r\n        if (this.state.term === '' || this.state.location === '') {\r\n            alert('Please enter both a restaurant and a location!');\r\n            return;\r\n        }\r\n\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n    }\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(sortByOptions).map(sortByOption => {\r\n      let sortByOptionsValue = sortByOptions[sortByOption];\r\n      return <li onClick={this.handleSortByChange.bind(this, sortByOptionsValue)} className={this.getSortByClass(sortByOptionsValue)} key ={sortByOptionsValue}>{sortByOption}</li>\r\n    });\r\n  }\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"SearchBar\">\r\n  <div className=\"SearchBar-sort-options\">\r\n    <ul>\r\n      {this.renderSortByOptions()}\r\n    </ul>\r\n  </div>\r\n  <div className=\"SearchBar-fields\">\r\n    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange} onKeyDown={this.handleKeyPress} />\r\n    <input placeholder=\"Where?\" onChange={this.handleLocationChange} onKeyDown={this.handleKeyPress} />\r\n  </div>\r\n  <div className=\"SearchBar-submit\" onClick={this.handleSearch}><span>Let's Go</span>\r\n\r\n  </div>\r\n</div>\r\n    )\r\n  }\r\n}\r\nexport default SearchBar;\r\n","const apiKey = '2gEMpm8ZS-Hd5BG6H81JkSWmB7xPEyrg7TXBNAVIfsBoxEEvJIArATuFxqMVyn7i--LpP9BPOnWRuTy1YLkkaAn4Q3GID6glaBkcLJgQmRQRKPU4uXJu0vqVC72LXnYx';\r\n\r\nconst Yelp = {\r\n  searchYelp(term, location, sortBy){\r\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${apiKey}`,\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (jsonResponse.businesses) {\r\n        return jsonResponse.businesses.map(business => {\r\n          console.log(business);\r\n          return {\r\n            id: business.id,\r\n            imageSrc: business.image_url,\r\n            name: business.name,\r\n            address: business.location.address1,\r\n            city: business.location.city,\r\n            state: business.location.state,\r\n            zipCode: business.location.zip_code,\r\n            category: business.categories[0].title,\r\n            rating: business.rating,\r\n            reviewCount: business.review_count,\r\n          };\r\n        });\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default Yelp;\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css'\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy){\n    Yelp.searchYelp(term, location, sortBy).then(businesses => {\n      this.setState({ businesses: businesses });\n    });\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <h1>ravenous</h1>\n      <SearchBar searchYelp={this.searchYelp} />\n      <BusinessList businesses={this.state.businesses} />\n    </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}